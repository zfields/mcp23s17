# A sample Makefile for building both Google Mock and Google Test and
# using them in user tests.  This file is self-contained, so you don't
# need to use the Makefile in Google Test's source tree.  Please tweak
# it to suit your environment and project.  You may want to move it to
# your project's root directory.

# SYNOPSIS:

#   make [all]   - makes everything.
#   make TARGET  - makes the given target.
#   make tidy-up - removes all files generated by make - except the binary.
#   make clean   - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GMOCK_HEADERS and GTEST_HEADERS, which you can use
# in your own targets but shouldn't modify.

# Points (absolutely) to the root of Google Mock.
GMOCK_DIR = /usr/local/gmock-1.7.0

# Points to the root of Google Test, as a sub-directory of Google Mock.
# Remember to tweak this if you want to use a copy of Google Test at a
# different location.
GTEST_DIR = $(GMOCK_DIR)/gtest

# Where to find user code, relative to this file.
# Remember to tweak this if you move this file.
CODE_DIR = ..
TEST_DIR = .

# Flags passed to the preprocessor.
# Set Google Mock/Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Mock/Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include \
            -isystem $(GMOCK_DIR)/include \
            -std=c++11 \

# Flags passed to the C++ compiler.
CXXFLAGS += -g \
#           -pthread \
            -Wall \
            -Wextra \
            -Wno-c++11-extensions \

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
UNDER_TEST = mcp23s17

# All Google Test headers. Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h \

# All Google Mock headers.  Usually you shouldn't change this
# definition.
GMOCK_HEADERS = $(GMOCK_DIR)/include/gmock/*.h \
                $(GMOCK_DIR)/include/gmock/internal/*.h \
                $(GTEST_HEADERS) \

# House-keeping build targets.

all : $(TEST_SUITE)

clean :
	rm -f $(TEST_SUITE) *.a *.o

tidy_up :
	rm -f *.a *.o

# Builds gmock.a and gmock_main.a.  These libraries contain both
# Google Mock and Google Test.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc \
              $(GTEST_DIR)/src/*.h \
              $(GTEST_HEADERS) \

GMOCK_SRCS_ = $(GMOCK_DIR)/src/*.cc \
              $(GMOCK_HEADERS) \

# For simplicity and to avoid depending on implementation details of
# Google Mock and Google Test, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Mock and
# Google Test compile fast and for ordinary users their source rarely
# changes.

gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) -I$(GMOCK_DIR) -I$(CODE_DIR) $(CXXFLAGS) \
    -c $(GTEST_DIR)/src/gtest-all.cc

gmock-all.o : $(GMOCK_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) -I$(GMOCK_DIR) -I$(CODE_DIR) $(CXXFLAGS) \
    -c $(GMOCK_DIR)/src/gmock-all.cc

gmock_main.o : $(GMOCK_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) -I$(GMOCK_DIR) -I$(CODE_DIR) $(CXXFLAGS) \
    -c $(GMOCK_DIR)/src/gmock_main.cc

gmock.a : gmock-all.o gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gmock_main.a : gmock-all.o gtest-all.o gmock_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds the unit tests.  A test should link with either gmock.a
# or gmock_main.a, depending on whether it defines its own main()
# function.  It's fine if your test only uses features from Google
# Test (and not Google Mock).

$(UNDER_TEST).o : $(CODE_DIR)/$(UNDER_TEST).cpp \
                  $(CODE_DIR)/$(UNDER_TEST).h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(CODERUNNER_FLAGS) \
    -c $(CODE_DIR)/$(UNDER_TEST).cpp

$(TEST_SUITE).o : $(TEST_DIR)/$(TEST_SUITE).cpp \
                  $(CODE_DIR)/$(UNDER_TEST).h
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(CODERUNNER_FLAGS) \
    -c $(TEST_DIR)/$(TEST_SUITE).cpp

$(TEST_SUITE) : $(TEST_SUITE).o \
                $(UNDER_TEST).o \
                gmock_main.a
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) $(CODERUNNER_FLAGS) -lpthread $^ -o $@
